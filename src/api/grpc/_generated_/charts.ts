// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "charts.proto" (package "charts", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message charts.ChartPoint
 */
export interface ChartPoint {
    /**
     * @generated from protobuf field: string timestamp = 1
     */
    timestamp: string;
    /**
     * @generated from protobuf field: repeated double values = 2
     */
    values: number[];
}
/**
 * @generated from protobuf message charts.ChartData
 */
export interface ChartData {
    /**
     * @generated from protobuf field: string chartId = 1
     */
    chartId: string;
    /**
     * @generated from protobuf field: repeated charts.ChartPoint points = 2
     */
    points: ChartPoint[];
}
/**
 * @generated from protobuf message charts.ChartDataList
 */
export interface ChartDataList {
    /**
     * @generated from protobuf field: repeated charts.ChartData items = 1
     */
    items: ChartData[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ChartPoint$Type extends MessageType<ChartPoint> {
    constructor() {
        super("charts.ChartPoint", [
            { no: 1, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "values", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ChartPoint>): ChartPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timestamp = "";
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<ChartPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartPoint): ChartPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string timestamp */ 1:
                    message.timestamp = reader.string();
                    break;
                case /* repeated double values */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.values.push(reader.double());
                    else
                        message.values.push(reader.double());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string timestamp = 1; */
        if (message.timestamp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.timestamp);
        /* repeated double values = 2; */
        if (message.values.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.values.length; i++)
                writer.double(message.values[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message charts.ChartPoint
 */
export const ChartPoint = new ChartPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartData$Type extends MessageType<ChartData> {
    constructor() {
        super("charts.ChartData", [
            { no: 1, name: "chartId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "points", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChartPoint }
        ]);
    }
    create(value?: PartialMessage<ChartData>): ChartData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chartId = "";
        message.points = [];
        if (value !== undefined)
            reflectionMergePartial<ChartData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartData): ChartData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chartId */ 1:
                    message.chartId = reader.string();
                    break;
                case /* repeated charts.ChartPoint points */ 2:
                    message.points.push(ChartPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chartId = 1; */
        if (message.chartId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chartId);
        /* repeated charts.ChartPoint points = 2; */
        for (let i = 0; i < message.points.length; i++)
            ChartPoint.internalBinaryWrite(message.points[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message charts.ChartData
 */
export const ChartData = new ChartData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartDataList$Type extends MessageType<ChartDataList> {
    constructor() {
        super("charts.ChartDataList", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChartData }
        ]);
    }
    create(value?: PartialMessage<ChartDataList>): ChartDataList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ChartDataList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartDataList): ChartDataList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated charts.ChartData items */ 1:
                    message.items.push(ChartData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartDataList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated charts.ChartData items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ChartData.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message charts.ChartDataList
 */
export const ChartDataList = new ChartDataList$Type();
/**
 * @generated ServiceType for protobuf service charts.ChartService
 */
export const ChartService = new ServiceType("charts.ChartService", [
    { name: "GetChartData", options: {}, I: Empty, O: ChartDataList }
]);
